{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./media.service\";\nexport let EquipoclienteService = /*#__PURE__*/(() => {\n  var _class;\n  class EquipoclienteService {\n    constructor(http, router, uploadImagen) {\n      this.http = http;\n      this.router = router;\n      this.uploadImagen = uploadImagen;\n      this.baseUrl = 'http://localhost:8080/api/v1/equipos-clientes'; // Reemplaza con la URL de tu backend\n      this.httpHeaders = new HttpHeaders({\n        'Content-Type': 'application/json;charset=UTF-8'\n      });\n      this.httpHeadersMultipart = new HttpHeaders({\n        'Content-Type': 'multipart/form-data;charset=UTF-8'\n      });\n      this.headersBoundary = new HttpHeaders({\n        'Content-Type': 'multipart/form-data; boundary=---------------------------1234567890'\n      });\n    }\n    //Metodo para los errores y execepciones\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Error del cliente:', error.error.message);\n      } else {\n        console.error(`Código de error: ${error.status}, ` + `Error: ${error.error}`);\n      }\n      return throwError('Ocurrió un error. Por favor, inténtalo de nuevo más tarde.');\n    }\n    //Metodo get que muestra todos los equiposclientes\n    findAllEquipos() {\n      return this.http.get(this.baseUrl).pipe(catchError(this.handleError));\n    }\n    // Creación de un objeto FormData para envío multipart\n    //Metodo create que crea los clientes\n    /*private prepareFormData(equipo: EquipoCliente): FormData {\n        const formData = new FormData();\n        //formData.append('codigoequipo', equipo.codigoequipo.toString());\n        formData.append('nombre', equipo.nombre);\n        formData.append('categoria_equipo', equipo.categoria_equipo);\n        formData.append('capacidad_maxima', equipo.capacidad_maxima.toString());\n        formData.append('capacidad_minima', equipo.capacidad_minima.toString());\n        formData.append('resolucion', equipo.resolucion.toString());\n        formData.append('divisiones', equipo.divisiones.toString());\n        formData.append('observaciones', equipo.observaciones);\n        formData.append('unidad_medida', equipo.unidad_medida);\n        formData.append('instrumento', equipo.instrumento);\n        formData.append('mide', equipo.mide);\n        formData.append('lista_precio', equipo.lista_precio.toString());\n        formData.append('cmc_equipo', equipo.cmc_equipo);\n        formData.append('fabricante_receptor', equipo.fabricante_receptor);\n        formData.append('modelo_receptor', equipo.modelo_receptor);\n        formData.append('serie_receptor', equipo.serie_receptor);\n        formData.append('id_interno_receptor', equipo.id_interno_receptor);\n        formData.append('fabricante_sensor', equipo.fabricante_sensor);\n        formData.append('modelo_sensor', equipo.modelo_sensor);\n        formData.append('serie_sensor', equipo.serie_sensor);\n        formData.append('id_interno_sensor', equipo.id_interno_sensor);\n        formData.append('fabricante_indicador', equipo.fabricante_indicador);\n        formData.append('modelo_indicador', equipo.modelo_indicador);\n        formData.append('serie_indicador', equipo.serie_indicador);\n        formData.append('id_interno_indicador', equipo.id_interno_indicador);\n        formData.append('activo', equipo.activo.toString());\n    \n        if (equipo.cliente&& equipo.cliente.idCliente) {\n          formData.append('cliente', JSON.stringify(equipo.cliente.idCliente));\n        }\n        return formData;\n      }*/\n    create(equipo, imagen_equipo) {\n      // Crear un objeto FormData para combinar el objeto equipo y el archivo\n      const formData = new FormData();\n      // Agregar el objeto equipo como JSON al FormData\n      formData.append('equipo', JSON.stringify(equipo));\n      // Agregar el archivo como MultipartFile al FormData\n      formData.append('file', imagen_equipo, imagen_equipo.name);\n      // Realizar la solicitud POST al servidor y retornar el Observable resultante\n      return this.http.post(this.baseUrl, formData, {\n        headers: this.headersBoundary\n      }).pipe(catchError(e => {\n        if (e.status == 400) {\n          return throwError(e);\n        }\n        console.error(e.error.mensaje);\n        Swal.fire(e.error.mensaje, e.error.error, 'error');\n        return throwError(e);\n      }), map(response => {\n        if (response === null) {\n          this.router.navigate(['/equipocliente']);\n          throw new Error('Null response received');\n        }\n        return response;\n      }));\n    }\n    //Bucar por ID\n    getEquipo(id) {\n      return this.http.get(`${this.baseUrl}/${id}`).pipe(catchError(e => {\n        this.router.navigate(['/equipocliente']);\n        console.error(e.error.mensaje);\n        Swal.fire('Error al editar', e.error.mensaje, 'error');\n        return throwError(e);\n      }), map(equipo => {\n        equipo.nombre = equipo.nombre.toUpperCase();\n        equipo.categoria_equipo = equipo.categoria_equipo.toUpperCase();\n        // Realiza cualquier otra modificación necesaria en los campos del cliente aquí\n        return equipo;\n      }));\n    }\n    //Actualizar Equipo por ID\n    update(equipo, file) {\n      const equipoConImagen = {\n        ...equipo\n      };\n      equipoConImagen.imagen_equipo = file;\n      const formData = this.prepareFormData(equipoConImagen);\n      return this.http.put(`${this.baseUrl}/equipos-clientes/${equipo.idEquipo}`, formData).pipe(catchError(this.handleError));\n    }\n    //Borrar Equipo\n    delete(id) {\n      const url = `${this.baseUrl}/${id}`;\n      return this.http.delete(url, {\n        headers: this.headersBoundary\n      }).pipe(catchError(this.handleError));\n    }\n    //Impoirtar Equipos\n    importarEquipos(archivo) {\n      const formData = new FormData();\n      formData.append('archivo', archivo);\n      return this.http.post(`${this.baseUrl}/importar`, formData);\n    }\n    //Exportar Clientes\n    exportarEquipos() {\n      const headers = new HttpHeaders({\n        'Accept': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      });\n      return this.http.get(`${this.baseUrl}/exportar`, {\n        responseType: 'blob',\n        headers\n      }).pipe(catchError(this.handleError));\n    }\n  }\n  _class = EquipoclienteService;\n  _class.ɵfac = function EquipoclienteService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.MediaService));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return EquipoclienteService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}