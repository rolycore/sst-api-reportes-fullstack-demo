{"ast":null,"code":"import Swal from 'sweetalert2';\nimport { tap } from 'rxjs';\nimport { Cliente } from 'src/app/models/cliente';\nimport { EquipoCliente } from 'src/app/models/equipocliente';\nimport { ReporteMantenimiento } from '../models/reportemantenimiento';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/reportemantenimiento.service\";\nimport * as i2 from \"src/app/_services/cliente.service\";\nimport * as i3 from \"src/app/_services/equipocliente.service\";\nexport let ReportemantenimientoComponent = /*#__PURE__*/(() => {\n  var _class;\n  class ReportemantenimientoComponent {\n    constructor(reporteService, clienteService, equipoClienteService) {\n      this.reporteService = reporteService;\n      this.clienteService = clienteService;\n      this.equipoClienteService = equipoClienteService;\n      this.loading = false;\n      this.reporte = new ReporteMantenimiento();\n      this.fechaReporte = '';\n      this.cliente = new Cliente();\n      this.clientes = []; // Lista de clientes\n      this.clienteSeleccionado = null; // ID del cliente seleccionado\n      this.equiposFiltrados = [];\n      this.equipos = []; // Lista de clientes\n      this.equipoSeleccionado = null; // ID del equipo seleccionado\n      this.equipo = new EquipoCliente();\n    }\n    ngOnInit() {\n      this.nombreCliente = '';\n      this.nombreEquipo = '';\n      this.fechaReporte = '';\n    }\n    ajustarFormatoFecha(fecha) {\n      // La fecha original es \"aaaa/mm/dd\", la ajustamos a \"mm/dd/aaaa\"\n      const partes = fecha.split('/');\n      if (partes.length === 3) {\n        const aaaa = partes[0];\n        const mm = partes[1];\n        const dd = partes[2];\n        return mm + '/' + dd + '/' + aaaa;\n      }\n      return fecha;\n    }\n    getReportes() {\n      this.reporteService.listAll().pipe(tap(reportes => {\n        // Filtrar por nombre del cliente\n        if (this.nombreCliente) {\n          reportes = reportes.filter(reporte => reporte.nombrecliente === this.nombreCliente);\n        }\n        // Filtrar por Equipo del cliente\n        if (this.nombreEquipo) {\n          reportes = reportes.filter(reporte => reporte.nombreequipo === this.nombreEquipo);\n        }\n        this.reportes = reportes;\n        console.log('Reporte.Component: ');\n        reportes.forEach(reporte => {\n          console.log(reporte.no_reporte);\n        });\n      })).subscribe();\n    }\n    filtrarequipo() {\n      this.reporteService.listAll().pipe(tap(reportes => {\n        // Filtrar por Equipo del cliente\n        if (this.nombreEquipo) {\n          reportes = reportes.filter(reporte => reporte.nombreequipo === this.nombreEquipo);\n        }\n        this.reportes = reportes;\n        console.log('Reporte.Component: ');\n        reportes.forEach(reporte => {\n          console.log(reporte.no_reporte);\n        });\n      })).subscribe();\n    }\n    filtrarfechareporte() {\n      // Ajusta el formato de fecha antes de llamar a getReportes()\n      if (this.fechaReporte) {\n        this.fechaReporte = this.ajustarFormatoFecha(this.fechaReporte);\n      }\n      this.reporteService.listAll().pipe(tap(reportes => {\n        // Filtrar por fecha de reporte\n        if (this.fechaReporte) {\n          const selectedDate = new Date(this.fechaReporte);\n          reportes = reportes.filter(reporte => {\n            const reporteDate = new Date(reporte.fechareporte);\n            return reporteDate.getFullYear() === selectedDate.getFullYear() && reporteDate.getMonth() === selectedDate.getMonth() && reporteDate.getDate() === selectedDate.getDate();\n          });\n        }\n        this.reportes = reportes;\n        console.log('Reporte.Component: ');\n        reportes.forEach(reporte => {\n          console.log(reporte.no_reporte);\n        });\n      })).subscribe();\n    }\n    limpiarFiltro() {\n      this.nombreCliente = ''; // Restablecer el filtro\n      this.nombreEquipo = '';\n      this.getReportes(); // Actualizar la lista de reportes sin el filtro\n      this.filtrarequipo();\n      this.filtrarfechareporte();\n    }\n    delete(reporte) {\n      const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      });\n      swalWithBootstrapButtons.fire({\n        title: 'Está seguro?',\n        text: `¿Seguro que desea eliminar el reporte?`,\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Si, eliminar!',\n        cancelButtonText: 'No, cancelar!',\n        reverseButtons: true\n      }).then(result => {\n        if (result.isConfirmed) {\n          this.reporteService.deleteById(reporte.idrepmant).subscribe(response => {\n            this.reportes = this.reportes.filter(rep => rep !== reporte);\n          }, error => {\n            swalWithBootstrapButtons.fire('Error', 'Ocurrió un error al eliminar el cliente.', 'error');\n          }, () => {\n            swalWithBootstrapButtons.fire('Reporte Eliminado!', `El Reporte ${reporte.no_reporte} eliminado con éxito.`, 'success');\n          });\n        }\n      });\n    }\n    exportarPDF(idrepmant) {\n      this.loading = true; // Activa la bandera de carga\n      this.reporteService.generateReport(idrepmant).subscribe(response => {\n        console.log('respuesta: ', response);\n        if (response.body instanceof Blob) {\n          // Convierte el Blob a una URL\n          const blob = new Blob([response.body], {\n            type: 'application/pdf'\n          });\n          const url = window.URL.createObjectURL(blob);\n          window.open(url); // Abre el PDF en una nueva ventana del navegador\n          Swal.fire('Reporte Tecnico', `El reporte ha sido impreso exitosamente!`, 'success');\n          this.loading = false; // se desactiva la bandera de carga\n        } else {\n          this.loading = false; // se desactiva la bandera de carga\n          console.error('El resultado de la solicitud no es un Blob válido');\n          Swal.fire({\n            icon: 'error',\n            title: 'Oops...',\n            text: 'El resultado de la solicitud no es un Blob válido'\n          });\n        }\n      }, error => {\n        console.error('Error al exportar el PDF', error);\n        Swal.fire({\n          icon: 'error',\n          title: 'Oops...',\n          text: 'Ocurrio un error al Imprimir el reporte!'\n        });\n        // Maneja el error aquí (por ejemplo, muestra un mensaje al usuario)\n      });\n    }\n  }\n  _class = ReportemantenimientoComponent;\n  _class.ɵfac = function ReportemantenimientoComponent_Factory(t) {\n    return new (t || _class)(i0.ɵɵdirectiveInject(i1.ReportemantenimientoService), i0.ɵɵdirectiveInject(i2.ClienteService), i0.ɵɵdirectiveInject(i3.EquipoclienteService));\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"app-reportemantenimiento\"]],\n    decls: 2,\n    vars: 0,\n    template: function ReportemantenimientoComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"reportemantenimiento works!\");\n        i0.ɵɵelementEnd();\n      }\n    }\n  });\n  return ReportemantenimientoComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}