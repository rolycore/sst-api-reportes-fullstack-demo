{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./media.service\";\nexport let EquipoclienteService = /*#__PURE__*/(() => {\n  var _class;\n  class EquipoclienteService {\n    constructor(http, router, uploadImagen) {\n      this.http = http;\n      this.router = router;\n      this.uploadImagen = uploadImagen;\n      this.baseUrl = 'http://localhost:8080/api/v1/equipos-clientes'; // Reemplaza con la URL de tu backend\n      this.httpHeaders = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      this.httpHeadersMultipart = new HttpHeaders({\n        'Content-Type': 'multipart/form-data'\n      });\n      this.headersBoundary = new HttpHeaders({\n        'Content-Type': 'multipart/form-data; boundary=---------------------------1234567890'\n      });\n    }\n    //Metodo para los errores y execepciones\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Error del cliente:', error.error.message);\n      } else {\n        console.error(`Código de error: ${error.status}, ` + `Error: ${error.error}`);\n      }\n      return throwError('Ocurrió un error. Por favor, inténtalo de nuevo más tarde.');\n    }\n    //Metodo get que muestra todos los equiposclientes\n    findAllEquipos() {\n      return this.http.get(this.baseUrl).pipe(catchError(this.handleError));\n    }\n    // Creación de un objeto FormData para envío multipart\n    //Metodo create que crea los clientes\n    prepareFormData(equipoCliente) {\n      const formData = new FormData();\n      //formData.append('codigoequipo', equipo.codigoequipo.toString());\n      formData.append('nombre', equipoCliente.nombre);\n      formData.append('categoria_equipo', equipoCliente.categoria_equipo);\n      formData.append('capacidad_maxima', equipoCliente.capacidad_maxima.toString());\n      formData.append('capacidad_minima', equipoCliente.capacidad_minima.toString());\n      formData.append('resolucion', equipoCliente.resolucion.toString());\n      formData.append('divisiones', equipoCliente.divisiones.toString());\n      formData.append('observaciones', equipoCliente.observaciones);\n      formData.append('unidad_medida', equipoCliente.unidad_medida);\n      formData.append('instrumento', equipoCliente.instrumento);\n      formData.append('mide', equipoCliente.mide);\n      formData.append('lista_precio', equipoCliente.lista_precio.toString());\n      formData.append('cmc_equipo', equipoCliente.cmc_equipo);\n      formData.append('fabricante_receptor', equipoCliente.fabricante_receptor);\n      formData.append('modelo_receptor', equipoCliente.modelo_receptor);\n      formData.append('serie_receptor', equipoCliente.serie_receptor);\n      formData.append('id_interno_receptor', equipoCliente.id_interno_receptor);\n      formData.append('fabricante_sensor', equipoCliente.fabricante_sensor);\n      formData.append('modelo_sensor', equipoCliente.modelo_sensor);\n      formData.append('serie_sensor', equipoCliente.serie_sensor);\n      formData.append('id_interno_sensor', equipoCliente.id_interno_sensor);\n      formData.append('fabricante_indicador', equipoCliente.fabricante_indicador);\n      formData.append('modelo_indicador', equipoCliente.modelo_indicador);\n      formData.append('serie_indicador', equipoCliente.serie_indicador);\n      formData.append('id_interno_indicador', equipoCliente.id_interno_indicador);\n      formData.append('activo', equipoCliente.activo.toString());\n      if (equipoCliente.cliente) {\n        formData.append('cliente', JSON.stringify(equipoCliente.cliente));\n      }\n      if (equipoCliente.imagen_equipo) {\n        formData.append('file', equipoCliente.imagen_equipo);\n      }\n      return formData;\n    }\n    prepareFile(file) {\n      const formData = new FormData();\n      return formData;\n    }\n    create(equipo) {\n      const formData = this.prepareFormData(equipo);\n      return this.http.post(this.baseUrl, formData, {\n        headers: this.headersBoundary,\n        responseType: 'arraybuffer'\n      }).pipe(catchError(this.handleError));\n    }\n    //Bucar por ID\n    getEquipo(id) {\n      return this.http.get(`${this.baseUrl}/equipos-clientes/${id}`);\n    }\n    //Actualizar Equipo por ID\n    update(equipo) {\n      const formData = this.prepareFormData(equipo);\n      return this.http.put(`${this.baseUrl}/${equipo.idEquipo}`, formData, {\n        headers: this.headersBoundary\n      }).pipe(catchError(error => {\n        if (error.status === 400) {\n          return throwError(error.error);\n        }\n        return throwError('Error en la solicitud.');\n      }));\n    }\n    //Borrar Equipo\n    delete(id) {\n      const url = `${this.baseUrl}/${id}`;\n      return this.http.delete(url, {\n        headers: this.headersBoundary\n      }).pipe(catchError(this.handleError));\n    }\n  }\n  _class = EquipoclienteService;\n  _class.ɵfac = function EquipoclienteService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.MediaService));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return EquipoclienteService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}