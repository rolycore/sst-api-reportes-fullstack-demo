{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nimport { trigger, transition, style, animate } from '@angular/animations'; // Importa las animaciones\nimport { User } from 'src/app/models/user';\nimport Swal from 'sweetalert2';\nexport let AdminformComponent = class AdminformComponent {\n  constructor(authService, tokenStorage, formBuilder, router, activateRoute) {\n    this.authService = authService;\n    this.tokenStorage = tokenStorage;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.activateRoute = activateRoute;\n    this.formulario = new FormGroup({});\n    //activeTab: number = 1;\n    this.usuario = new User();\n    this.titulo = 'Panel Administrador de usuarios';\n    this.roles = ['ROLE_ADMIN', 'ROLE_MODERATOR', 'ROLE_USER'];\n    this.selectedRole = '';\n    this.isSuccessful = false;\n    this.isSignUpFailed = false;\n    this.submitted = false;\n    this.errores = [];\n  }\n  ngOnInit() {\n    this.formulario = this.formBuilder.group({\n      username: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      roles: ['', Validators.required]\n    });\n    this.cargarUsuario();\n  }\n  cargarUsuario() {\n    this.activateRoute.params.subscribe(params => {\n      let id = params['id'];\n      if (id) {\n        this.authService.getUserById(id).subscribe(usuario => {\n          this.usuario = usuario;\n          this.formulario.patchValue({\n            username: usuario.username,\n            password: usuario.password,\n            email: usuario.email,\n            roles: usuario.roles // Cambia 'role' por 'roles'\n          });\n        });\n      }\n    });\n  }\n\n  updateUser(id, updatedUser) {\n    /// Obtener el array de roles seleccionados desde el formulario\n    const selectedRoles = this.formulario.get('role')?.value;\n    // Asignar los roles al usuario actualizado\n    updatedUser.roles = selectedRoles;\n    console.log('nuevo role: ', selectedRoles);\n    this.authService.updateUser(id, updatedUser).subscribe(response => {\n      this.router.navigate(['/admin']);\n      Swal.fire('Usuario actualizado', `El usuario ${this.usuario.username} ha sido actualizado con éxito!`, 'success');\n      console.log('Usuario actualizado exitosamente', response);\n    }, error => {\n      this.errores = error.error.errors ? error.error.errors : [];\n      console.error('Código del error desde el backend: ' + error.status);\n      Swal.fire('Error al actualizar usuario: ' + error.error.errors.mensaje + error.status, error.error.errors, 'error');\n      console.error('Error al actualizar usuario:', error);\n      // Puedes manejar el error de alguna manera aquí, como mostrar un mensaje al usuario\n    });\n  }\n};\n\nAdminformComponent = __decorate([Component({\n  selector: 'app-adminform',\n  templateUrl: './adminform.component.html',\n  styleUrls: ['./adminform.component.css'],\n  animations: [trigger('fadeInOut', [transition(':enter', [style({\n    opacity: 0\n  }), animate('500ms ease-out', style({\n    opacity: 1\n  }))]), transition(':leave', [animate('500ms ease-out', style({\n    opacity: 0\n  }))])])]\n})], AdminformComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}