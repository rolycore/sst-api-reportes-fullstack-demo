{"ast":null,"code":"import { FormGroup } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport { ReporteMantenimiento } from 'src/app/models/reportemantenimiento';\nimport { EquipoCliente } from 'src/app/models/equipocliente';\nimport { Cliente } from 'src/app/models/cliente';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/_services/reportemantenimiento.service\";\nimport * as i2 from \"src/app/_services/media.service\";\nimport * as i3 from \"@angular/platform-browser\";\nimport * as i4 from \"src/app/_services/equipocliente.service\";\nimport * as i5 from \"src/app/_services/cliente.service\";\nimport * as i6 from \"@angular/router\";\nimport * as i7 from \"@angular/forms\";\nexport let ReportemantformComponent = /*#__PURE__*/(() => {\n  var _class;\n  class ReportemantformComponent {\n    constructor(reproteMantenimientoService, mediaservice, sanitizer, equipoClienteService, clienteService, router, activateRoute, formBuilder) {\n      this.reproteMantenimientoService = reproteMantenimientoService;\n      this.mediaservice = mediaservice;\n      this.sanitizer = sanitizer;\n      this.equipoClienteService = equipoClienteService;\n      this.clienteService = clienteService;\n      this.router = router;\n      this.activateRoute = activateRoute;\n      this.formBuilder = formBuilder;\n      this.loading = false;\n      this.reportem = new ReporteMantenimiento();\n      this.equipo = new EquipoCliente();\n      this.cliente = new Cliente();\n      this.formulario = new FormGroup({});\n      this.activeTab = 1;\n      this.titulo = 'Crear Reporte Mantenimiento';\n      this.titulocliente = 'Datos del Cliente';\n      this.tituloequipo = 'Datos del Equipo';\n      this.clientes = []; // Lista de clientes\n      this.clienteSeleccionado = null; // ID del cliente seleccionado\n      this.equipos = []; // Lista de clientes\n      this.equipoSeleccionado = null; // ID del equipo seleccionado\n      this.errores = [];\n      this.equiposFiltrados = [];\n      this.isImagenUrl = false;\n      this.archivos = [];\n      this.rutasImagenes = [];\n    }\n    capturarFile(event, indice) {\n      const archivoCapturado = event.target.files[0];\n      if (archivoCapturado) {\n        this.extraerBase64(archivoCapturado).then(imagen => {\n          // Asignar la imagen previsualizada a la variable correspondiente según el índice\n          switch (indice) {\n            case 0:\n              this.previsualizacion = imagen.base;\n              break;\n            case 1:\n              this.previsualizacion1 = imagen.base;\n              break;\n            case 2:\n              this.previsualizacion2 = imagen.base;\n              break;\n            case 3:\n              this.previsualizacion3 = imagen.base;\n              break;\n            case 4:\n              this.previsualizacion4 = imagen.base;\n              break;\n            case 5:\n              this.previsualizacion5 = imagen.base;\n              break;\n            case 6:\n              this.previsualizacion6 = imagen.base;\n              break;\n            case 7:\n              this.previsualizacion7 = imagen.base;\n              break;\n            case 8:\n              this.previsualizacion8 = imagen.base;\n              break;\n            default:\n              break;\n          }\n          const formData = new FormData();\n          formData.append('file', archivoCapturado);\n          const maxWidth = 800; // Cambia esto a tu ancho máximo deseado\n          const maxHeight = 600; // Cambia esto a tu alto máximo deseado\n          this.mediaservice.subirFile(formData, maxWidth, maxHeight).subscribe(response => {\n            console.log('response', response);\n            // Almacena la ruta de la imagen en el campo correspondiente de ReporteTecnico\n            switch (indice) {\n              case 0:\n                this.reportem.rutaImagen1 = response.uri;\n                console.log('fileName1: ', this.reportem.rutaImagen1);\n                break;\n              case 1:\n                this.reportem.rutaImagen2 = response.uri;\n                console.log('fileName2: ', this.reportem.rutaImagen2);\n                break;\n              case 2:\n                this.reportem.rutaImagen3 = response.uri;\n                console.log('fileName3: ', this.reportem.rutaImagen3);\n                break;\n              case 3:\n                this.reportem.rutaImagen4 = response.uri;\n                console.log('fileName4: ', this.reportem.rutaImagen4);\n                break;\n              case 4:\n                this.reportem.rutaImagen5 = response.uri;\n                console.log('fileName5: ', this.reportem.rutaImagen4);\n                break;\n              case 5:\n                this.reportem.rutaImagen6 = response.uri;\n                console.log('fileName6: ', this.reportem.rutaImagen4);\n                break;\n              case 6:\n                this.reportem.rutaImagen7 = response.uri;\n                console.log('fileName7: ', this.reportem.rutaImagen4);\n                break;\n              case 7:\n                this.reportem.rutaImagen8 = response.uri;\n                console.log('fileName8: ', this.reportem.rutaImagen4);\n                break;\n              case 8:\n                this.reportem.rutaImagen9 = response.uri;\n                console.log('fileName9: ', this.reportem.rutaImagen4);\n                break;\n              default:\n                break;\n            }\n          });\n        });\n      }\n    }\n    extraerBase64(archivo) {\n      return new Promise(resolve => {\n        const reader = new FileReader();\n        reader.onload = event => {\n          resolve({\n            base: event.target.result\n          });\n        };\n        reader.readAsDataURL(archivo);\n      });\n    }\n    clearImage() {\n      this.previsualizacion = '';\n      this.archivos = [];\n    }\n    clearImage1() {\n      this.previsualizacion1 = '';\n      this.archivos = [];\n    }\n    clearImage2() {\n      this.previsualizacion2 = '';\n      this.archivos = [];\n    }\n    clearImage3() {\n      this.previsualizacion3 = '';\n      this.archivos = [];\n    }\n    clearImage4() {\n      this.previsualizacion4 = '';\n      this.archivos = [];\n    }\n    clearImage5() {\n      this.previsualizacion5 = '';\n      this.archivos = [];\n    }\n    clearImage6() {\n      this.previsualizacion6 = '';\n      this.archivos = [];\n    }\n    clearImage7() {\n      this.previsualizacion7 = '';\n      this.archivos = [];\n    }\n    clearImage8() {\n      this.previsualizacion8 = '';\n      this.archivos = [];\n    }\n    cargarReporte() {\n      //cargando datos de equipo a la orden\n      this.reportem.equipo = this.equipo;\n      //cargando datos del cliente a la orden\n      this.reportem.cliente = this.cliente;\n      this.activateRoute.params.subscribe(params => {\n        let id = params['id'];\n        if (id) {\n          this.reproteMantenimientoService.listById(id).subscribe(reportem => {\n            this.reportem = reportem;\n            this.formulario?.patchValue({\n              cliente: this.reportem.cliente,\n              equipo: this.reportem.equipo,\n              nombrecliente: this.reportem.nombrecliente,\n              nombreequipo: this.reportem.nombreequipo,\n              no_reporte: this.reportem.no_reporte,\n              no_cotizacion: this.reportem.no_cotizacion,\n              tecnico: this.reportem.tecnico,\n              horaentrada: this.reportem.horaentrada,\n              horasalida: this.reportem.horasalida,\n              horaviajes: this.reportem.horaviajes,\n              fechareporte: this.reportem.fechareporte,\n              contacto: this.reportem.contacto,\n              cargo: this.reportem.cargo,\n              direccion: this.reportem.direccion,\n              ubicacionequipo: this.reportem.ubicacionequipo,\n              fabricanteindicador: this.reportem.fabricanteindicador,\n              fabricantemarco: this.reportem.fabricantemarco,\n              fabricantetransductor: this.reportem.fabricantetransductor,\n              modeloindicador: this.reportem.modeloindicador,\n              modelomarco: this.reportem.modelomarco,\n              modelotransductor: this.reportem.modelotransductor,\n              serieindicador: this.reportem.serieindicador,\n              seriemarco: this.reportem.seriemarco,\n              serietransductor: this.reportem.serietransductor,\n              capacidadindicador: this.reportem.capacidadindicador,\n              capacidadmarco: this.reportem.capacidadmarco,\n              capacidadtransductor: this.reportem.capacidadtransductor,\n              notamantprevent: this.reportem.notamantprevent,\n              notahallazgo: this.reportem.notahallazgo,\n              recomendaciones: this.reportem.recomendaciones,\n              imagen_1: this.reportem.imagen_1,\n              imagen_2: this.reportem.imagen_2,\n              imagen_3: this.reportem.imagen_3,\n              imagen_4: this.reportem.imagen_4,\n              imagen_5: this.reportem.imagen_5,\n              imagen_6: this.reportem.imagen_6,\n              imagen_7: this.reportem.imagen_7,\n              imagen_8: this.reportem.imagen_8,\n              imagen_9: this.reportem.imagen_9,\n              descripcion1: this.reportem.descripcion1,\n              descripcion2: this.reportem.descripcion2,\n              descripcion3: this.reportem.descripcion3,\n              descripcion4: this.reportem.descripcion4,\n              descripcion5: this.reportem.descripcion5,\n              descripcion6: this.reportem.descripcion6,\n              descripcion7: this.reportem.descripcion7,\n              descripcion8: this.reportem.descripcion8,\n              descripcion9: this.reportem.descripcion9,\n              rutaImagen1: this.reportem.rutaImagen1,\n              rutaImagen2: this.reportem.rutaImagen2,\n              rutaImagen3: this.reportem.rutaImagen3,\n              rutaImagen4: this.reportem.rutaImagen4,\n              rutaImagen5: this.reportem.rutaImagen5,\n              rutaImagen6: this.reportem.rutaImagen6,\n              rutaImagen7: this.reportem.rutaImagen7,\n              rutaImagen8: this.reportem.rutaImagen8,\n              rutaImagen9: this.reportem.rutaImagen9\n            });\n          });\n        }\n      });\n    }\n    ngOnInit() {\n      this.cargarReporte();\n      this.formulario = this.formBuilder.group({\n        no_reporte: [''],\n        nombrecliente: [''],\n        nombreequipo: [''],\n        tecnico: [''],\n        horaentrada: [''],\n        horasalida: [''],\n        horaviajes: [''],\n        fechareporte: [''],\n        fecha: [''],\n        contacto: [''],\n        cargo: [''],\n        direccion: [''],\n        no_cotizacion: [''],\n        ubicacionequipo: [''],\n        fabricanteindicador: [''],\n        fabricantemarco: [''],\n        fabricantetransductor: [''],\n        modeloindicador: [''],\n        modelomarco: [''],\n        modelotransductor: [''],\n        serieindicador: [''],\n        seriemarco: [''],\n        serietransductor: [''],\n        capacidadindicador: [''],\n        capacidadmarco: [''],\n        capacidadtransductor: [''],\n        notamantprevent: [''],\n        notahallazgo: [''],\n        recomendaciones: [''],\n        imagen_1: [''],\n        imagen_2: [''],\n        imagen_3: [''],\n        imagen_4: [''],\n        imagen_5: [''],\n        imagen_6: [''],\n        imagen_7: [''],\n        imagen_8: [''],\n        imagen_9: [''],\n        descripcion1: [''],\n        descripcion2: [''],\n        descripcion3: [''],\n        descripcion4: [''],\n        descripcion5: [''],\n        descripcion6: [''],\n        descripcion7: [''],\n        descripcion8: [''],\n        descripcion9: [''],\n        rutaImagen1: [''],\n        rutaImagen2: [''],\n        rutaImagen3: [''],\n        rutaImagen4: [''],\n        rutaImagen5: [''],\n        rutaImagen6: [''],\n        rutaImagen7: [''],\n        rutaImagen8: [''],\n        rutaImagen9: ['']\n      });\n      // Mover la obtención de la lista de clientes aquí\n      this.clienteService.getClientes().subscribe(data => {\n        this.clientes = data;\n      });\n      // Mover la obtención de la lista de equipos aquí\n      this.equipoClienteService.findAllEquipos().subscribe(data => {\n        this.equipos = data;\n      });\n      this.cargarReporte();\n    }\n    // Función que se ejecuta cuando se selecciona un cliente en el select\n    onSelectCliente() {\n      // Obtener el ID del cliente seleccionado\n      const idClienteSeleccionado = this.clienteSeleccionado;\n      // Llamar al servicio para obtener los datos del cliente por su ID\n      this.clienteService.getCliente(idClienteSeleccionado).subscribe(cliente => {\n        // Actualizar los campos de entrada con los datos del cliente\n        this.clienteData = cliente;\n        this.reportem.nombrecliente = cliente.nombre_comercial;\n        this.reportem.direccion = cliente.direccion;\n        this.reportem.contacto = cliente.nombre_contacto;\n        this.reportem.cargo = cliente.cargo_servicio;\n        console.log('Data cliente:', this.clienteData);\n      });\n      console.log('ID cliente seleccionado: ', idClienteSeleccionado);\n      // Filtrar la lista de equipos para mostrar solo los equipos del cliente seleccionado\n      if (idClienteSeleccionado) {\n        this.equipoClienteService.getEquiposPorCliente(idClienteSeleccionado).subscribe(equipos => {\n          this.equiposFiltrados = equipos;\n        });\n      } else {\n        this.equiposFiltrados = []; // Limpia la lista de equipos si no se ha seleccionado un cliente.\n      }\n\n      console.log('ID Equipo filtrado: ', this.equiposFiltrados);\n    }\n    // Función que se ejecuta cuando se selecciona un equipocliente en el select\n    onSelectEquipocliente() {\n      // Obtener el ID del equipocliente seleccionado\n      const idEquipoSeleccionado = this.equipoSeleccionado;\n      if (idEquipoSeleccionado) {\n        this.equipoClienteService.getEquipo(idEquipoSeleccionado).subscribe(equipo => {\n          this.equipoData = equipo;\n          // Asignar los datos a las propiedades correspondientes\n          this.reportem.nombreequipo = equipo.nombre;\n          console.log('Data equipo: ', this.equipoData);\n        });\n      }\n    }\n    crearReporte() {\n      // Crear un objeto ClienteId con solo el idCliente\n      const idClienteSeleccionado = this.formulario.get('cliente')?.value;\n      if (!idClienteSeleccionado) {\n        console.error('Debes seleccionar un cliente.');\n        return;\n      }\n      const clienteId = {\n        idCliente: idClienteSeleccionado\n      };\n      // Luego, puedes convertir este objeto a un objeto de tipo Cliente si es necesario\n      const cliente = {\n        ...clienteId,\n        nombre: '',\n        apellido: '',\n        email: '',\n        createAt: new Date(),\n        telefono_empresa: '',\n        cod_cliente: '',\n        razon_social: '',\n        nombre_comercial: '',\n        ruc: '',\n        dv: '',\n        direccion: '',\n        telefono_jefe: '',\n        celular_jefe: '',\n        correo_electronico: '',\n        actividad_economica: '',\n        abreviatura: '',\n        nombre_contacto: '',\n        cargo_servicio: '',\n        celular_servicio: '',\n        correo_servicio: '',\n        telefono_servicio: '',\n        nombre_cobro: '',\n        cargo_cobro: '',\n        telefono_cobro: '',\n        celular_cobro: '',\n        correo_cobro: '',\n        activo: false,\n        equipos: [],\n        ordenTrabajos: [],\n        reporteTecnicos: []\n      };\n      // Asignar el cliente a la Orden\n      this.reportem.cliente = cliente;\n      const idEquipoSeleccionado = this.formulario.get('equipo')?.value;\n      if (!idEquipoSeleccionado) {\n        console.error('Debes seleccionar un cliente.');\n        return;\n      }\n      // Crear un objeto ClienteId con solo el idCliente\n      const equipoId = {\n        idEquipo: idEquipoSeleccionado\n      };\n      const equipo = {\n        ...equipoId,\n        codigoequipo: '',\n        codigoequipocliente: '',\n        nombre: '',\n        nombrecliente: '',\n        marca: '',\n        modelo: '',\n        numero_serie: '',\n        capacidad: '',\n        categoria_equipo: '',\n        capacidad_maxima: '',\n        capacidad_minima: '',\n        resolucion: '',\n        divisiones: '',\n        observaciones: '',\n        // imagen_equipo: File = new File(fileBits, fileName, options),\n        unidad_medida: '',\n        instrumento: '',\n        mide: '',\n        lista_precio: '',\n        cmc_equipo: '',\n        fabricante_receptor: '',\n        modelo_receptor: '',\n        serie_receptor: '',\n        id_interno_receptor: '',\n        fabricante_sensor: '',\n        modelo_sensor: '',\n        id_interno_sensor: '',\n        serie_sensor: '',\n        fabricante_indicador: '',\n        modelo_indicador: '',\n        serie_indicador: '',\n        id_interno_indicador: '',\n        createAt: new Date(),\n        activo: false,\n        cliente: new Cliente()\n      };\n      this.reportem.equipo = equipo;\n      // Aquí puedes realizar la validación adicional del formulario antes de proceder\n      // Luego, puedes enviar una solicitud a tu servicio para crear la orden de trabajo\n      // Asegúrate de que este servicio maneje adecuadamente la creación en el backend\n      this.reproteMantenimientoService.create(this.reportem).subscribe(reporte => {\n        this.router.navigate(['/mantenimiento']);\n        Swal.fire('Nuevo Reporte Creado', `El reporte mantenimiento con numero ${reporte.no_reporte} ha sido creada con éxito!`, 'success');\n      }, err => {\n        this.errores = err.error.errors ? err.error.errors : [];\n        console.error('Código del error desde el backend: ' + err.status);\n        Swal.fire('Error al Crear orden: ' + err.error.errors.mensaje + err.status, err.error.errors, 'error');\n      });\n    }\n    updateReporte() {\n      // Crear un objeto ClienteId con solo el idCliente\n      const idClienteSeleccionado = this.formulario.get('cliente')?.value;\n      if (!idClienteSeleccionado) {\n        console.error('Debes seleccionar un cliente.');\n        return;\n      }\n      const clienteId = {\n        idCliente: idClienteSeleccionado\n      };\n      // Luego, puedes convertir este objeto a un objeto de tipo Cliente si es necesario\n      const cliente = {\n        ...clienteId,\n        nombre: '',\n        apellido: '',\n        email: '',\n        createAt: new Date(),\n        telefono_empresa: '',\n        cod_cliente: '',\n        razon_social: '',\n        nombre_comercial: '',\n        ruc: '',\n        dv: '',\n        direccion: '',\n        telefono_jefe: '',\n        celular_jefe: '',\n        correo_electronico: '',\n        actividad_economica: '',\n        abreviatura: '',\n        nombre_contacto: '',\n        cargo_servicio: '',\n        celular_servicio: '',\n        correo_servicio: '',\n        telefono_servicio: '',\n        nombre_cobro: '',\n        cargo_cobro: '',\n        telefono_cobro: '',\n        celular_cobro: '',\n        correo_cobro: '',\n        activo: false,\n        equipos: [],\n        ordenTrabajos: [],\n        reporteTecnicos: []\n      };\n      // Asignar el cliente a la Orden\n      this.reportem.cliente = cliente;\n      const idEquipoSeleccionado = this.formulario.get('equipo')?.value;\n      if (!idEquipoSeleccionado) {\n        console.error('Debes seleccionar un cliente.');\n        return;\n      }\n      // Crear un objeto ClienteId con solo el idCliente\n      const equipoId = {\n        idEquipo: idEquipoSeleccionado\n      };\n      const equipo = {\n        ...equipoId,\n        codigoequipo: '',\n        codigoequipocliente: '',\n        nombre: '',\n        nombrecliente: '',\n        marca: '',\n        modelo: '',\n        numero_serie: '',\n        capacidad: '',\n        categoria_equipo: '',\n        capacidad_maxima: '',\n        capacidad_minima: '',\n        resolucion: '',\n        divisiones: '',\n        observaciones: '',\n        // imagen_equipo: File = new File(fileBits, fileName, options),\n        unidad_medida: '',\n        instrumento: '',\n        mide: '',\n        lista_precio: '',\n        cmc_equipo: '',\n        fabricante_receptor: '',\n        modelo_receptor: '',\n        serie_receptor: '',\n        id_interno_receptor: '',\n        fabricante_sensor: '',\n        modelo_sensor: '',\n        id_interno_sensor: '',\n        serie_sensor: '',\n        fabricante_indicador: '',\n        modelo_indicador: '',\n        serie_indicador: '',\n        id_interno_indicador: '',\n        createAt: new Date(),\n        activo: false,\n        cliente: new Cliente()\n      };\n      this.reportem.equipo = equipo;\n      // Aquí puedes realizar la validación adicional del formulario antes de proceder\n      // Luego, puedes enviar una solicitud a tu servicio para crear la orden de trabajo\n      // Asegúrate de que este servicio maneje adecuadamente la creación en el backend\n      this.reproteMantenimientoService.update(this.reportem).subscribe(reporte => {\n        this.router.navigate(['/mantenimiento']);\n        Swal.fire('Reporte Actualizado', `El reporte mantenimiento con numero ${this.reportem.no_reporte} ha sido actualizado con éxito!`, 'success');\n      }, err => {\n        this.errores = err.error.errors ? err.error.errors : [];\n        console.error('Código del error desde el backend: ' + err.status);\n        Swal.fire('Error al Crear orden: ' + err.error.errors.mensaje + err.status, err.error.errors, 'error');\n      });\n    }\n    exportarPDF(idrepmant) {\n      this.loading = true; // Activa la bandera de carga\n      this.reproteMantenimientoService.generateReport(idrepmant).subscribe(response => {\n        console.log('respuesta: ', response);\n        if (response.body instanceof Blob) {\n          // Convierte el Blob a una URL\n          const blob = new Blob([response.body], {\n            type: 'application/pdf'\n          });\n          const url = window.URL.createObjectURL(blob);\n          window.open(url); // Abre el PDF en una nueva ventana del navegador\n          Swal.fire('Reporte Mantenimiento', `El reporte ha sido impreso exitosamente!`, 'success');\n          this.loading = false; // se desactiva la bandera de carga\n        } else {\n          this.loading = false; // se desactiva la bandera de carga\n          console.error('El resultado de la solicitud no es un Blob válido');\n          Swal.fire({\n            icon: 'error',\n            title: 'Oops...',\n            text: 'El resultado de la solicitud no es un Blob válido'\n          });\n        }\n      }, error => {\n        console.error('Error al exportar el PDF', error);\n        Swal.fire({\n          icon: 'error',\n          title: 'Oops...',\n          text: 'Ocurrio un error al Imprimir el reporte!'\n        });\n        // Maneja el error aquí (por ejemplo, muestra un mensaje al usuario)\n      });\n    }\n  }\n  _class = ReportemantformComponent;\n  _class.ɵfac = function ReportemantformComponent_Factory(t) {\n    return new (t || _class)(i0.ɵɵdirectiveInject(i1.ReportemantenimientoService), i0.ɵɵdirectiveInject(i2.MediaService), i0.ɵɵdirectiveInject(i3.DomSanitizer), i0.ɵɵdirectiveInject(i4.EquipoclienteService), i0.ɵɵdirectiveInject(i5.ClienteService), i0.ɵɵdirectiveInject(i6.Router), i0.ɵɵdirectiveInject(i6.ActivatedRoute), i0.ɵɵdirectiveInject(i7.FormBuilder));\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"app-reportemantform\"]],\n    decls: 2,\n    vars: 0,\n    template: function ReportemantformComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"reportemantform works!\");\n        i0.ɵɵelementEnd();\n      }\n    }\n  });\n  return ReportemantformComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}