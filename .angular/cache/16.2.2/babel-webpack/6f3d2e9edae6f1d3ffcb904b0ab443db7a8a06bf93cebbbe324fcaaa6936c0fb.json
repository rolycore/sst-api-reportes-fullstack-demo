{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let EquipoclienteService = /*#__PURE__*/(() => {\n  var _class;\n  class EquipoclienteService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.baseUrl = 'http://localhost:8080/api/v1/equipos-clientes'; // Reemplaza con la URL de tu backend\n      this.httpHeaders = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n    }\n    //Metodo para los errores y execepciones\n    handleError(error) {\n      console.error(error);\n      swal.fire(error.mensaje, error.error, 'error');\n      return throwError(error);\n    }\n    //Metodo get que muestra todos los equiposclientes\n    findAllEquipos() {\n      return this.http.get(this.baseUrl).pipe(catchError(this.handleError));\n    }\n    //Creacion de equipo\n    createEquipo(equipo) {\n      //const formData: FormData = new FormData();\n      // formData.append('id', id.toString());\n      // formData.append('imagen', imagen, imagen.name);\n      //formData.append('equipo', JSON.stringify(equipo));\n      return this.http.post(this.baseUrl, equipo).pipe(catchError(this.handleError));\n    }\n    //Bucar por ID\n    getEquipo(id) {\n      return this.http.get(`${this.baseUrl}/${id}`).pipe(catchError(e => {\n        this.router.navigate(['/equipoclientes']);\n        console.error(e.error.mensaje);\n        swal.fire('Error al editar', e.error.mensaje, 'error');\n        return throwError(e);\n      }), map(equipo => {\n        equipo.nombre = equipo.nombre.toUpperCase();\n        equipo.categoria_equipo = equipo.categoria_equipo.toUpperCase();\n        // Realiza cualquier otra modificación necesaria en los campos del cliente aquí\n        return equipo;\n      }));\n    }\n    //Actualizar Equipo por ID\n    updateEquipo(id, imagen, equipo) {\n      const formData = new FormData();\n      formData.append('id', id.toString());\n      formData.append('imagen', imagen, imagen.name);\n      formData.append('equipo', JSON.stringify(equipo));\n      const url = `${this.baseUrl}/${id}`;\n      return this.http.put(url, formData).pipe(catchError(this.handleError));\n    }\n    //Borrar Equipo\n    delete(id) {\n      const url = `${this.baseUrl}/${id}`;\n      return this.http.delete(url, {\n        headers: this.httpHeaders\n      }).pipe(catchError(this.handleError));\n    }\n    //Buscar Equipo Por Nombre\n    buscarEquipoClientePorNombre(nombre) {\n      const url = `${this.baseUrl}/search`;\n      const params = {\n        nombre\n      }; // Puedes ajustar los parámetros según tu API\n      return this.http.post(url, params, {\n        headers: this.httpHeaders\n      }).pipe(catchError(this.handleError));\n    }\n  }\n  _class = EquipoclienteService;\n  _class.ɵfac = function EquipoclienteService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return EquipoclienteService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}