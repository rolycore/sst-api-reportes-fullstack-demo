{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport Swal from 'sweetalert2';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let ClienteService = /*#__PURE__*/(() => {\n  var _class;\n  class ClienteService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.urlEndpoint = 'http://62.72.24.222:8080/api/v1/clientes';\n      this.httpHeaders = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      this.httpHeadersMultipart = new HttpHeaders({\n        'Content-Type': 'multipart/form-data'\n      });\n    }\n    //Metodo para los errores y execepciones\n    handleError(error) {\n      console.error(error);\n      Swal.fire(error.mensaje, error.error, 'error');\n      return throwError(error);\n    }\n    //Metodo get que muestra todos los clientes\n    getClientes() {\n      return this.http.get(this.urlEndpoint).pipe(tap(response => {\n        let clientes = response;\n        clientes.forEach(cliente => {\n          console.log('ClienteService : tap 1');\n          console.log(cliente.nombre);\n        });\n      }), map(response => {\n        let clientes = response;\n        return clientes.map(cliente => {\n          cliente.nombre = cliente.nombre.toUpperCase();\n          cliente.apellido = cliente.apellido.toUpperCase();\n          //let datePipe = new DatePipe('en-US');\n          //cliente.createAt = formatDate(cliente.createAt,'EEEE dd, MMMM yyyy','es-PA');//formatDate(cliente.createAt,'dd-MM-yyyy','en-US');\n          return cliente;\n        });\n      }), tap(response => {\n        console.log('ClienteService : tap 2');\n        response.forEach(cliente => {\n          console.log(cliente.nombre);\n        });\n      })); //forma de retornar el verbo get\n      //return this.http.get(this.urlEndpoint).pipe(map((response) => as Cliente[])); //esta forma esta deprecada\n    }\n    //metodo get buscar Cliente por ID\n    /*getCliente(id: any): Observable<Cliente> {\n      return this.http.get<Cliente>(`${this.urlEndpoint}/${id}`).pipe(\n        catchError(e =>{\n          this.router.navigate(['/clientes']);\n          console.error(e.error.mensaje);\n             swal.fire('Error al editar',e.error.mensaje,'error');\n          return throwError(e);\n        })\n      );\n    }*/\n    obtenerClientePorId(id) {\n      return this.http.get(`${this.urlEndpoint}/${id}`).pipe(catchError(e => {\n        console.error(e.error.mensaje);\n        Swal.fire('Error al encontrar id', e.error.mensaje, 'error');\n        return throwError(e);\n      }), map(cliente => {\n        cliente.nombre_comercial = cliente.nombre.toUpperCase();\n        return cliente;\n      }));\n    }\n    getCliente(id) {\n      return this.http.get(`${this.urlEndpoint}/${id}`).pipe(catchError(e => {\n        this.router.navigate(['/cliente']);\n        console.error(e.error.mensaje);\n        Swal.fire('Error al editar', e.error.mensaje, 'error');\n        return throwError(e);\n      }), map(cliente => {\n        cliente.nombre = cliente.nombre.toUpperCase();\n        cliente.apellido = cliente.apellido.toUpperCase();\n        // Realiza cualquier otra modificación necesaria en los campos del cliente aquí\n        return cliente;\n      }));\n    }\n    /*En este ejemplo, utilizamos el operador map para modificar los campos del cliente, en este caso, convirtiendo el nombre y el apellido en mayúsculas. Puedes realizar cualquier otra modificación o procesamiento que necesites dentro del bloque map.\n       De esta manera, cuando llames al método getCliente(id) desde tu componente FormComponent, obtendrás el objeto completo del cliente, incluyendo los campos adicionales, como el apellido, el email y cualquier otro campo definido en la clase Cliente.\n       Recuerda que también debes asegurarte de que los campos adicionales estén definidos correctamente en la clase Cliente para que coincidan con la estructura de los datos devueltos por el servicio.\n       Espero que esto te ayude a obtener los otros campos del cliente en tu servicio ClienteService. Si tienes alguna otra pregunta, no dudes en preguntar.*/\n    //Metodo create que crea los clientes\n    create(cliente) {\n      return this.http.post(this.urlEndpoint, cliente, {\n        headers: this.httpHeaders\n      }).pipe(catchError(e => {\n        if (e.status == 400) {\n          return throwError(e);\n        }\n        console.error(e.error.mensaje);\n        Swal.fire(e.error.mensaje, e.error.error, 'error');\n        return throwError(e);\n      }), map(response => {\n        if (response === null) {\n          this.router.navigate(['/cliente']);\n          throw new Error('Null response received');\n        }\n        return response;\n      }));\n    }\n    //Metodo update que actualizalos clientes por ID\n    update(cliente) {\n      return this.http.put(`${this.urlEndpoint}/${cliente.idCliente}`, cliente, {\n        headers: this.httpHeaders\n      }).pipe(catchError(e => {\n        if (e.status == 400) {\n          return throwError(e);\n        }\n        this.router.navigate(['/cliente']);\n        console.error(e.error.mensaje);\n        Swal.fire(e.error.mensaje, e.error.error, 'error');\n        return throwError(e);\n      }));\n    }\n    //Metodo delete que borra el cliente por ID\n    delete(idCliente) {\n      return this.http.delete(`${this.urlEndpoint}/${idCliente}`, {\n        headers: this.httpHeaders\n      });\n    }\n    //Bucar cliente por nombre\n    buscarClientesPorNombre(nombre) {\n      const url = `${this.urlEndpoint}/search?nombre=${nombre}`;\n      return this.http.post(url, {}).pipe(catchError(this.handleError));\n    }\n    //Impoirtar Clientes\n    importarClientes(archivo) {\n      const formData = new FormData();\n      formData.append('archivo', archivo);\n      return this.http.post(`${this.urlEndpoint}/importar`, formData);\n    }\n    //Exportar Clientes\n    exportarClientes() {\n      const headers = new HttpHeaders({\n        'Accept': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      });\n      return this.http.get(`${this.urlEndpoint}/exportar`, {\n        responseType: 'blob',\n        headers\n      }).pipe(catchError(this.handleError));\n    }\n  }\n  _class = ClienteService;\n  _class.ɵfac = function ClienteService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return ClienteService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}